let mapleader = ','

set nocompatible
set t_Co=256

let s:defaultNodeModules = '~/.vim/node_modules/.bin/'

filetype off

set runtimepath^=~/.vim/bundle/neobundle.vim/

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Color themes
NeoBundle 'vim-scripts/saturn.vim'
NeoBundle 'easysid/mod8.vim'

NeoBundle 'vim-airline/vim-airline'

" Add smart commands for comments like:
" gcc - Toggle comment for the current line
" gc  - Toggle comments for selected region or number of strings
" Very usefull
NeoBundle 'tomtom/tcomment_vim'

" Nice statusline/ruler for vim
NeoBundle 'vim-airline/vim-airline-themes'

" Add usefull hotkey for operation with surroundings
" cs{what}{towhat} - inside '' or [] or something like this allow
" change surroundings symbols to another
" and ds{what} - remove them
NeoBundle 'tpope/vim-surround'



"--------------------------------------------------
" Syntax highlighting

" JavaScript syntax highlighting
" NeoBundle 'mxw/vim-jsx'

" Improve javascript syntax highlighting, needed for good folding,
" and good-looking javascript code
NeoBundle 'jelera/vim-javascript-syntax'

" Ansible playbooks syntax highlighting
NeoBundle 'pearofducks/ansible-vim'

" Vagrantfile and :Vagrant autocompetition
NeoBundle 'hashivim/vim-vagrant'


" syntax checker
NeoBundle 'scrooloose/syntastic'
" Install jshint and csslint for syntastic
" Path to jshint if it not installed, then use local installation
if !executable(expand(s:defaultNodeModules . 'eslint'))
  silent ! echo 'Installing eslint' && npm --prefix ~/.vim/ install eslint
  silent ! echo 'Installing eslint-config-airbnb' && npm --prefix ~/.vim/ install eslint-config-airbnb
endif

" Great file system explorer, it appears when you open dir in vim
" Allow modification of dir, and may other things
" Must have
NeoBundle 'scrooloose/nerdtree'


" Fireplace.vim, another fantastic plugin by the amazing tpope, makes it easy to
" evaluate Clojure code from a buffer by connecting to a running nREPL server
" (this is what you get when you run `lein repl`). Quick tips:
"
" * Start vim from the same directory you ran `lein repl` from and it will
"   automatically detect the nREPL host/port info, or use `:Connect` in Vim.
" * `cpr` (my mnemonic: clojure please require) takes the content from the active
"   buffer and requires it inside the REPL.
" * `cpp` (my mnemonic: clojure please print) evaluates the outermost form under
"   the cursor and prints it at the bottom of the screen.
" * `cqp` (my mnemonic: clojure quick print) gives you a one-line REPL prompt at
"   the bottom of the screen (for quick one-liner evals).
" * `[` jumps to the definition for the symbol under your cursor, even if it’s
"   inside the Clojure source!
" * `K` gives you documentation for symbol under cursor.
" * `:A` takes you to the test (if you’re in the implementation) or vice-versa,
"   and `:AS` or `:AV` gives it to you in a horizontal or vertical split.
NeoBundle 'tpope/vim-fireplace'

" TODO
NeoBundle 'vim-scripts/VimClojure'

call neobundle#end()

filetype plugin indent on

NeoBundleCheck


" Enable syntax highlighting
syntax on


"-------------------------
" Airline
" Always show airline
set laststatus=2

" Colorscheme for airline
let g:airline_theme='papercolor'

" Enable airline for tab-bar
" let g:airline#extensions#tabline#enabled = 1


"-------------------------
" NERDTree

" Tell NERDTree to display hidden files on startup
let NERDTreeShowHidden=1

" Disable bookmarks label, and hint about '?'
let NERDTreeMinimalUI=1

" Display current file in the NERDTree ont the left
nmap <leader><leader> :NERDTreeFind<CR>



"-------------------------
" Linters

function! s:FindSyntasticExecPath(toolName)
    if executable(a:toolName)
        return a:toolName
    endif

    let fullPath=fnamemodify('.', ':p:h')
    while fullPath != fnamemodify('/', ':p:h')
        if filereadable(expand(fullPath . '/node_modules/.bin/' . a:toolName))
            return fullPath . '/node_modules/.bin/' . a:toolName
        endif
        let fullPath = fnamemodify(fullPath . '/../', ':p:h')
    endwhile

    return  s:defaultNodeModules . a:toolName

endfunction

let g:syntastic_javascript_eslint_exec = s:FindSyntasticExecPath('eslint')

" Enable autochecks
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1

let g:syntastic_javascript_checkers = ['eslint']



" colors
" set background=light
" colorscheme saturn
" colorscheme rakr-light
set background=dark
colorscheme mod8


" Enable display whitespace characters
set list

" Setting up how to display whitespace characters
set listchars=tab:⇥\ ,trail:·,extends:⋯,precedes:⋯,nbsp:~

" Numbers of rows to keep to the left and to the right off the screen
set scrolloff=10

" Display Line numbers
set number

" Highlight line with cursor
set cursorline

" higlight column right after max textwidth
set colorcolumn=+1

" Copy indent from previous line
set autoindent

" Enable smart indent. it add additional indents whe necessary
set smartindent

" Number of spaces that a Tab in the file counts for
set tabstop=2
set shiftwidth=2
set expandtab


"--------------------------------------------------
" Search options

" Add the g flag to search/replace by default
set gdefault

" Highlight search results
set hlsearch

" Ignore case in search patterns
set ignorecase

" Override the 'ignorecase' option if the search patter ncontains upper case
" characters
set smartcase

" Live search. While typing a search command, show where the pattern
set incsearch

" Disable higlighting search result on Enter key
nnoremap <silent> <cr> :nohlsearch<cr><cr>

" Show matching brackets
set showmatch

" Make < and > match as well
set matchpairs+=<:>

" Reload .vimrc
nmap R :source $MYVIMRC<CR>

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>
